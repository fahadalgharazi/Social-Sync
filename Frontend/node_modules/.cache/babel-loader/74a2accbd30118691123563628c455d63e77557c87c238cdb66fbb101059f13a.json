{"ast":null,"code":"// src/api/ticketmaster.js\nimport axios from \"axios\";\n\n// Ticketmaster credentials\nconst TM_API_KEY = process.env.REACT_APP_TICKETMASTER_KEY;\n\n// Endpoint\nconst TM_URL = \"https://app.ticketmaster.com/discovery/v2/events.json\";\n\n// Progressive search radii (miles)\nconst RADII_MI = [15, 30, 60, 120, 250];\n\n// Map personality cluster → keyword pipe\nconst keywordPipes = {\n  \"Reactive Idealist\": \"Music\",\n  \"Balanced Realist\": \"Music\",\n  \"Sensitive Companion\": \"Music\",\n  \"Secure Optimist\": \"Music\"\n};\n\n// Normalize Ticketmaster event object → small UI-friendly shape\nfunction normalizeTMEvent(evt) {\n  var _evt$images, _evt$images2, _evt$dates, _evt$dates$start, _evt$dates2, _evt$dates2$start, _evt$dates3, _evt$dates3$start, _evt$_embedded, _evt$_embedded$venues, _evt$_embedded$venues2, _evt$_embedded2, _evt$_embedded2$venue, _evt$_embedded2$venue2, _evt$_embedded2$venue3, _evt$_embedded3, _evt$_embedded3$venue, _evt$_embedded3$venue2, _evt$_embedded3$venue3;\n  const img = ((_evt$images = evt.images) === null || _evt$images === void 0 ? void 0 : _evt$images.find(i => i.width >= 300)) || ((_evt$images2 = evt.images) === null || _evt$images2 === void 0 ? void 0 : _evt$images2[0]);\n  return {\n    id: evt.id,\n    name: evt.name,\n    url: evt.url,\n    date: ((_evt$dates = evt.dates) === null || _evt$dates === void 0 ? void 0 : (_evt$dates$start = _evt$dates.start) === null || _evt$dates$start === void 0 ? void 0 : _evt$dates$start.localDate) || ((_evt$dates2 = evt.dates) === null || _evt$dates2 === void 0 ? void 0 : (_evt$dates2$start = _evt$dates2.start) === null || _evt$dates2$start === void 0 ? void 0 : _evt$dates2$start.dateTime) || \"\",\n    time: ((_evt$dates3 = evt.dates) === null || _evt$dates3 === void 0 ? void 0 : (_evt$dates3$start = _evt$dates3.start) === null || _evt$dates3$start === void 0 ? void 0 : _evt$dates3$start.localTime) || \"\",\n    venueName: ((_evt$_embedded = evt._embedded) === null || _evt$_embedded === void 0 ? void 0 : (_evt$_embedded$venues = _evt$_embedded.venues) === null || _evt$_embedded$venues === void 0 ? void 0 : (_evt$_embedded$venues2 = _evt$_embedded$venues[0]) === null || _evt$_embedded$venues2 === void 0 ? void 0 : _evt$_embedded$venues2.name) || \"\",\n    venueCity: ((_evt$_embedded2 = evt._embedded) === null || _evt$_embedded2 === void 0 ? void 0 : (_evt$_embedded2$venue = _evt$_embedded2.venues) === null || _evt$_embedded2$venue === void 0 ? void 0 : (_evt$_embedded2$venue2 = _evt$_embedded2$venue[0]) === null || _evt$_embedded2$venue2 === void 0 ? void 0 : (_evt$_embedded2$venue3 = _evt$_embedded2$venue2.city) === null || _evt$_embedded2$venue3 === void 0 ? void 0 : _evt$_embedded2$venue3.name) || \"\",\n    venueState: ((_evt$_embedded3 = evt._embedded) === null || _evt$_embedded3 === void 0 ? void 0 : (_evt$_embedded3$venue = _evt$_embedded3.venues) === null || _evt$_embedded3$venue === void 0 ? void 0 : (_evt$_embedded3$venue2 = _evt$_embedded3$venue[0]) === null || _evt$_embedded3$venue2 === void 0 ? void 0 : (_evt$_embedded3$venue3 = _evt$_embedded3$venue2.state) === null || _evt$_embedded3$venue3 === void 0 ? void 0 : _evt$_embedded3$venue3.stateCode) || \"\",\n    imageUrl: (img === null || img === void 0 ? void 0 : img.url) || \"\"\n  };\n}\n\n/**\n * Fetch events from Ticketmaster based on personality and ZIP.\n * Expands radius until it finds events; falls back to virtual events.\n *\n * @param {string} personalityType\n * @param {string} zip\n * @param {number} limit\n * @returns {Promise<Array>}\n */\nexport async function fetchTicketmasterEvents(personalityType, zip, limit = 20) {\n  const keyword = keywordPipes[personalityType] || keywordPipes[\"Balanced Realist\"];\n  for (const radius of RADII_MI) {\n    try {\n      var _data$_embedded;\n      const {\n        data\n      } = await axios.get(TM_URL, {\n        params: {\n          apikey: TM_API_KEY,\n          postalCode: zip,\n          radius,\n          unit: \"miles\",\n          keyword,\n          size: limit,\n          sort: \"date,asc\"\n        }\n      });\n      const events = (data === null || data === void 0 ? void 0 : (_data$_embedded = data._embedded) === null || _data$_embedded === void 0 ? void 0 : _data$_embedded.events) || [];\n      if (events.length) {\n        return events.map(normalizeTMEvent);\n      }\n    } catch (err) {\n      console.error(`Ticketmaster radius ${radius} error:`, err);\n    }\n  }\n\n  // Fallback: virtual/online events\n  try {\n    var _data$_embedded2;\n    const {\n      data\n    } = await axios.get(TM_URL, {\n      params: {\n        apikey: TM_API_KEY,\n        keyword: \"virtual|online\",\n        size: limit\n      }\n    });\n    const events = (data === null || data === void 0 ? void 0 : (_data$_embedded2 = data._embedded) === null || _data$_embedded2 === void 0 ? void 0 : _data$_embedded2.events) || [];\n    return events.map(normalizeTMEvent);\n  } catch (err) {\n    console.error(\"Ticketmaster virtual fallback error:\", err);\n    return [];\n  }\n}","map":{"version":3,"names":["axios","TM_API_KEY","process","env","REACT_APP_TICKETMASTER_KEY","TM_URL","RADII_MI","keywordPipes","normalizeTMEvent","evt","_evt$images","_evt$images2","_evt$dates","_evt$dates$start","_evt$dates2","_evt$dates2$start","_evt$dates3","_evt$dates3$start","_evt$_embedded","_evt$_embedded$venues","_evt$_embedded$venues2","_evt$_embedded2","_evt$_embedded2$venue","_evt$_embedded2$venue2","_evt$_embedded2$venue3","_evt$_embedded3","_evt$_embedded3$venue","_evt$_embedded3$venue2","_evt$_embedded3$venue3","img","images","find","i","width","id","name","url","date","dates","start","localDate","dateTime","time","localTime","venueName","_embedded","venues","venueCity","city","venueState","state","stateCode","imageUrl","fetchTicketmasterEvents","personalityType","zip","limit","keyword","radius","_data$_embedded","data","get","params","apikey","postalCode","unit","size","sort","events","length","map","err","console","error","_data$_embedded2"],"sources":["/Users/student/Desktop/trio_proj/Personality_Based_Events/webpage/src/api/ticketmaster.js"],"sourcesContent":["// src/api/ticketmaster.js\nimport axios from \"axios\";\n\n// Ticketmaster credentials\nconst TM_API_KEY = process.env.REACT_APP_TICKETMASTER_KEY;\n\n// Endpoint\nconst TM_URL = \"https://app.ticketmaster.com/discovery/v2/events.json\";\n\n// Progressive search radii (miles)\nconst RADII_MI = [15, 30, 60, 120, 250];\n\n// Map personality cluster → keyword pipe\nconst keywordPipes = {\n  \"Reactive Idealist\": \"Music\",\n  \"Balanced Realist\": \"Music\",\n  \"Sensitive Companion\": \"Music\",\n  \"Secure Optimist\": \"Music\"\n};\n\n// Normalize Ticketmaster event object → small UI-friendly shape\nfunction normalizeTMEvent(evt) {\n  const img = evt.images?.find(i => i.width >= 300) || evt.images?.[0];\n  return {\n    id: evt.id,\n    name: evt.name,\n    url: evt.url,\n    date: evt.dates?.start?.localDate || evt.dates?.start?.dateTime || \"\",\n    time: evt.dates?.start?.localTime || \"\",\n    venueName: evt._embedded?.venues?.[0]?.name || \"\",\n    venueCity: evt._embedded?.venues?.[0]?.city?.name || \"\",\n    venueState: evt._embedded?.venues?.[0]?.state?.stateCode || \"\",\n    imageUrl: img?.url || \"\"\n  };\n}\n\n/**\n * Fetch events from Ticketmaster based on personality and ZIP.\n * Expands radius until it finds events; falls back to virtual events.\n *\n * @param {string} personalityType\n * @param {string} zip\n * @param {number} limit\n * @returns {Promise<Array>}\n */\nexport async function fetchTicketmasterEvents(personalityType, zip, limit = 20) {\n  const keyword = keywordPipes[personalityType] || keywordPipes[\"Balanced Realist\"];\n\n  for (const radius of RADII_MI) {\n    try {\n      const { data } = await axios.get(TM_URL, {\n        params: {\n          apikey: TM_API_KEY,\n          postalCode: zip,\n          radius,\n          unit: \"miles\",\n          keyword,\n          size: limit,\n          sort: \"date,asc\"\n        }\n      });\n      const events = data?._embedded?.events || [];\n      if (events.length) {\n        return events.map(normalizeTMEvent);\n      }\n    } catch (err) {\n      console.error(`Ticketmaster radius ${radius} error:`, err);\n    }\n  }\n\n  // Fallback: virtual/online events\n  try {\n    const { data } = await axios.get(TM_URL, {\n      params: { apikey: TM_API_KEY, keyword: \"virtual|online\", size: limit }\n    });\n    const events = data?._embedded?.events || [];\n    return events.map(normalizeTMEvent);\n  } catch (err) {\n    console.error(\"Ticketmaster virtual fallback error:\", err);\n    return [];\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}